@import '../../modules/utilities/typography/typography.json';
/// Typography
///
/// @access public
/// @group utilities
///
/// @param {map} $custom - where custom config will be passed
@mixin typography($custom: custom('typography')) {

    //*************************************************************
    // Configuration
    //*************************************************************

    $typography: config($typography, $custom);

    @include module {

        @at-root {

            //*****************************************************
            // Fonts
            //*****************************************************

            @each $font, $options in this('fonts') {
                // variables
                $type       : map-get($options, 'type');
                $family     : map-get($options, 'family');
                $import-name: str-replace($family, ' ', '+');
                $styles     : str-replace((inspect(map-get($options, 'styles'))), ' ', '');

                @if $type == 'google-font' {
                    @import url('http://fonts.googleapis.com/css?family=#{$import-name}:#{$styles}');
                }

                @if $type == 'asset' {
                    @font-face {
                        font-family: $family;
                        src: 
                            //@TODO look at why woff format for 'cyberpnuk2' font breaks
                            //url('#{$asset-path}/fonts/#{$family}/#{$family}.woff2') format('woff2'),
                            //url('#{$asset-path}/fonts/#{$family}/#{$family}.woff') format('woff'),
                            url('#{$asset-path}/fonts/#{$family}/#{$family}.ttf') format('truetype');
                    }   
                }

                @if this('font-helper-classes') {
                    .font-#{$family} {
                        font-family: $family;
                    }
                }
            }

            //*****************************************************
            // Styles
            //*****************************************************

            // Links
            @include module('link') {
                transition: color 0.4s;
                color: this('colors', 'link');
                text-decoration: none;

                p > &, small > & {
                    border-bottom: 1px solid;
                }

                &:hover {
                    color: this('colors', 'link-hover');
                }
            }

        }

    }

} // @mixin typography

//*****************************************************************
// Tools & Utilities
//*****************************************************************

/// Function to get configuration group
///
/// @access public
/// @group utilities
///
/// @param {map} $group - the group you are interested in
///
/// @return {map} - new map containing desired group
@function typography-config($group) {
    @return map-get($typography, $group);
}

/// Function to get desired value from configuration group
///
/// @access public
/// @group utilities
///
/// @param {map} $group - the configuration group you are interested in
/// @param {string} $key - the key of the value you are interested in
///
/// @return {*} - the desired value
@function typography($group, $key) {
    @return eval-config(map-get(typography-config($group), $key));
}

/// Function to get desired typeface value
///
/// @access public
/// @group utilities
///
/// @param {string} $typeface - the desired typeface value
/// @param {string|list} $fallback - the desired fallback typefaces
@function typeface($typeface, $fallback: ('Open Sans', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif)) {
    @return map-get(typography('fonts', $typeface), 'family') + ', ' + inspect($fallback);
}

/// Function to get value from 'sizes' group
///
/// @access public
/// @group utilities
///
/// @param {string} $size - the key of the size you are interested in
/// @param {bool} $rem - whether the returned value should use rem units
///
/// @return {number} - the desired font size
@function font-size($size, $rem: false) {
    $size: typography('sizes', $size);
    @if not $rem {
        @return $size;
    } @else {
        $size: $size / ($size * 0 + 1);
        @return unquote('#{$size}rem');
    }
}