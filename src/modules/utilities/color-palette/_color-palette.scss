/// One Nexus - modules\utilities\color-palette
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
/// @group utilities
/// @param {map} $custom - where custom config will be passed
/// @outputs all project color palettes as a global variable
///
/// @example
///     @include palettes((
///         'brand':(
///             'brand-1': #0090ff
///         )
///     ));
@mixin palettes($custom: ()) {

    //*************************************************************
    // Configuration
    //*************************************************************

    $palettes: config((	
        'name'                : 'palettes',	
        'greyscale':(
            'white'           : #ffffff,
            'grey-1'          : #f8f8f8,
            'grey-2'          : #dee0e2,
            'grey-3'          : #bfc1c3,
            'grey-4'          : #6f777b,
            'grey-5'          : #232627,
            'grey-6'          : #161819,
            'black'           : #000000
        ),
        'brand':(
            'brand-1'         : #2E3882,
            'brand-2'         : #06d2ff,
            'brand-3'         : #04CEC0
        ),
        'alert':(
            'error'           : #D9434E,
            'help'            : #F5BA42,
            'info'            : #4B8CDC,
            'success'         : #3BB85D
        ),
        'validation':(
            'valid'           : #00B16A,
            'invalid'         : #D91E18	
        ),
        'social':(
            'facebook'        : #507CBD,
            'twitter'         : #63CEF2,
            'linkedin'        : #117BB8,
            'github'          : #1C1C1C,
            'skype'           : #63CEF2,
            'pinterest'       : #C92228,
            'instagram'       : #5280A5,
            'rss'             : #FBA933,
            'youtube'         : #CB312E,
            'flickr'          : #ED1384,
            'vimeo'           : #1EB8EB,
            'dribbble'        : #EB4C89,
            'behance'         : #0595FC,
            'deviantart'      : #B3C434,
            'reddit'          : #0D7CCD,
            'google-plus'     : #dd4b39,
            'email'           : #6cb42c,
            'stumbleupon'     : #47AD20
        ),
        'gradients':(
            'brand':(
                'direction'   : 135deg,
                'color-stops' : (
                    'brand-1' 0%, 
                    'brand-2' 20%, 
                    'brand-3' 100%
                )
            )
        )
    ), $custom) !global;

} // @mixin palettes

//*****************************************************************
// Tools & Utilities
//*****************************************************************

/// Function to get desired color palette
///
/// @access public
/// @group utilities
/// @param {string} $palette - the key of the palette you are interested in
/// @return {map} - new map containing desired palette
@function palette($palette) {
    @return map-get($palettes, $palette);
}

/// Function to get desired color from specific palette
///
/// @access public
/// @group utilities
/// @param {map} $palette - the palette which contains your desired color
/// @param {string} $color - the key of the color you are interested in
/// @return {color} - the desired color value
@function color($palette, $color) {
	@return map-get(palette($palette), $color);
}

/// Function to merge entire/partial color palettets
///
/// @access public
/// @group utilities
/// @param {list} $palettes - the palettes you wish to merge
/// @return {map} - new map containing all desired colors and values
@function merge-palettes($palettes) {
    $new-palette: ();
    @each $palette in $palettes {
        // is the value a string? (an entire palette)
        @if type-of($palette) == 'string' {
            $new-palette: map-merge-deep($new-palette, palette($palette));
        } 
        // is the value a map?
        @else if type-of($palette) == 'map' {
            // is the map one which contains colors (keys) from an existing paltte?
            @if type-of(nth(nth($palette, 1), 2)) == 'list' {
                $_palette: nth(nth($palette, 1), 1);
                $_colors:  nth(nth($palette, 1), 2);

                $_map: ();

                @each $color in $_colors {
                    $_map: map-set($_map, $color, map-get(palette($_palette), $color));
                    $new-palette: map-merge($new-palette, $_map);
                }
            }
            // is the map one which contains new colors?
            @else if type-of(nth(nth($palette, 1), 2)) == 'color' {
                $new-palette: map-merge($new-palette, $palette);
            }
        }
    }
    @return $new-palette;
}

/// Function to create a linear-gradient
///
/// @access public
/// @group utilities
/// @param {map} $gradient - the desired gradient from the $palettes variable
/// @return {color} - the desired color value
@function gradient($gradient) {
    
    $gradient: color('gradients', $gradient);
    $direction: map-get($gradient, 'direction');
    $color-stops: map-get($gradient, 'color-stops');

    @each $color-stop in $color-stops {
        $color: nth($color-stop, 1);
        $updated-color-stop: list-replace(
            $color-stop, $color, map-search($palettes, $color)
        );
        $color-stops: list-replace(
            $color-stops, $color-stop, $updated-color-stop
        );
    }

    $color-stops: join($color-stops, (), comma);

    @return linear-gradient($direction, $color-stops);

}