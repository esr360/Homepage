@import '../../modules/objects/navigation/navigation.json';
/// Navigation
///
/// @access public
/// @group objects
///
/// @param {map} $custom - where custom config will be passed
@mixin navigation($custom: custom('navigation')) {

    // Config
    $navigation: config($navigation, $custom);

    //*************************************************************
    // Module
    //*************************************************************

    @include module {

        //*********************************************************
        // Core Styles
        //*********************************************************

        // all levels
        li {
            a {
                @include get-styles(this('global-item'));
                display: block;

                &:hover {
                    text-decoration: none;
                }
            }
        }

        // parent level only
        > ul {

            @include _module('list', ('reset'), false);
            vertical-align: middle;

            > li {
                // add gap between items
                margin-left: this('item', 'gutter');

                &:first-child {
                    margin-left: 0;
                }

                > a {
                    @include get-styles(this('item'));
                    // if item has child menu
                    &:not(:only-child) {
                        border-radius: 0;
                        border-bottom-color: transparent;

                        &::after {
                            content: this('dropdown-icon');
                            margin-left: 0.5em;
                            font-family: FontAwesome;
                        }
                    }
                }

                &:hover {
                    > a {
                        @include get-styles(this('item', 'hover'));
                        // if item has child menu
                        &:not(:only-child) {
                            @include get-styles(this('item', 'has-child', 'hover'));
                            border-bottom-color: transparent;
                        }
                    }
                }

                &.active {
                    > a {
                        @include get-styles(this('item', 'active'));
                    }

                    &:hover {
                        // if item is active and hovered
                        // > a {}
                    }
                }

            } // > li

        } // > ul

        // Larger Resolutions
        @media (min-width: breakpoint('break-3')) {
            > ul {
                display: inline-block;

                > li {
                    display: inline-block;
                    //position: relative;
                }
            }
        }

        //*********************************************************
        // Settings
        //*********************************************************

        @include option('noIcons') {
            @include module {
                @include component('icon') {
                    display: none;
                }
            }
        }

        //*********************************************************
        // Custom Content
        //*********************************************************

        @content;

    } // module

} // @mixin navigation