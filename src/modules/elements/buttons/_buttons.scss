@import '../../modules/elements/buttons/buttons.json';
/// Buttons
///
/// @access public
/// @group elements
///
/// @param {map} $custom - where custom config will be passed
@mixin buttons($custom: custom('buttons')) {

    // Configuration
    $buttons: config($buttons, $custom);

    //*************************************************************
    // Module
    //*************************************************************

    @include module {

        //*********************************************************
        // Core Styles
        //*********************************************************

        display: inline-block;
        padding-top: this('v-padding');
        padding-right: this('h-padding');
        padding-bottom: this('v-padding');
        padding-left: this('h-padding');
        border-color: transparent;
        text-decoration: none;
        vertical-align: middle;
        cursor: pointer;

        //*********************************************************
        // Sizes
        //*********************************************************

        @include font-sizes(('sizes': this('sizes')));

        //*********************************************************
        // Colors
        //*********************************************************

        // Point at which light/dark background changes for greyscale buttons
        $threshold: 77%;

        @each $key, $color in merge-palettes(this('palettes')) {
            @include modifier($key) {
                background: $color;

                @if is-grayscale($color, $key) {
                    @if (lightness($color) < $threshold) {
                        color: this('color');
                    } @else {
                        color: typography('colors', 'base');
                    }
                }

                &:hover {
                    background: darken($color, 10%);
                }
            }
        }

        //*********************************************************
        // Modifiers
        //*********************************************************

        @include modifier('block') {
            width: 100%;
            text-align: center;

            & + & {
                margin-top: (core('margin') / 2);
            }
        }

        @include modifier('border') {
            border-color: currentColor;
            background: none;
            color: inherit;

            &:hover {
                border-color: this('background');
                background: this('background');
                color: this('color');
            }

            $border-palettes: if(this('border-palettes'), this('border-palettes'), this('palettes'));

            @each $key, $color in merge-palettes($border-palettes) {
                @include modifier($key) {
                    color: $color;
                    @if is-grayscale($color, $key) {
                        border-color: $color;
                        color: $color;

                        &:hover {
                            @if (lightness($color) > $threshold) {
                                color: typography('colors', 'base');
                            }
                        }
                    } @else {
                        &:hover {
                            color: this('color');
                        }
                    }

                    &:hover {
                        border-color: $color;
                        background: $color;
                    }
                }
            }
        }

        @include modifier('disabled') {
            transition-delay: 999s;
            opacity: this('disabled-opacity');
            cursor: not-allowed;
        }

        @include modifier('round') {
            border-radius: this('round-radius');
        }

        @include modifiers(('oval', 'circle')) {
            border-radius: 1.5em;
        }

        @include modifier('sharp') {
            border-radius: 0;
        }

        @include modifier('icon') {
            padding: this('v-padding');
            text-align: center;

            .fa {
                width: 1em;
                height: 1em;
            }
        }

        @include modifier('active') {
            border-color: this('active', 'background');

            &:hover {
                background: this('active', 'background');
            }

            @include modifier('border') {
                background: none;
                color: this('active', 'background');

                &:hover {
                    border-color: this('active', 'background');
                }
            }
        }

        //*********************************************************
        // Components
        //*********************************************************

        @include component('group') {

            @include module {
                margin-left: this('group-spacing');

                &:first-child {
                    margin-left: 0;
                }
            }

            @include modifier('pills') {
                display: table;

                @include module {
                    display: table-cell;
                    margin-left: 0;
                }

                @include modifier('round') {
                    @include module {
                        border-radius: 0;

                        &:first-child {
                            border-top-left-radius: this('round-radius');
                            border-bottom-left-radius: this('round-radius');
                        }

                        &:last-child {
                            border-top-right-radius: this('round-radius');
                            border-bottom-right-radius: this('round-radius');
                        }
                    }
                }
            }

            @include modifier('stack') {
                @media (max-width: breakpoint('break-1')) {
                    @include module {
                        display: block;
                        margin-right: 0;
                        margin-left: 0;
                        text-align: center;

                        &:not(:first-child) {
                            margin-top: 1em;
                        }
                    }
                }
            }

        }

        a[class*="#{this('name')}"] {
            color: inherit;

            &:hover {
                color: inherit;
            }
        }

        //*********************************************************
        // Pseudo States
        //*********************************************************

        &:hover {
            background: darken(this('background'), 10%);
            text-decoration: none;
        }

        &:focus {
            outline: 0;
        }

        //*********************************************************
        // Custom Content
        //*********************************************************

        @content;

    } // @include module

    //*************************************************************
    // Hacks
    //*************************************************************

    // Makes input & button elements equal height in Firefox
    input::-moz-focus-inner,
    button::-moz-focus-inner {
        margin-top: 1px;
        margin-bottom: 1px;
        padding: 0;
        border: none;
    }

} // @mixin buttons