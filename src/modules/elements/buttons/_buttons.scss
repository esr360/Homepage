/// Buttons
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
/// @group elements
///
/// @param {map} $custom - where custom config will be passed
/// @outputs all button styles
///
/// @example
///     @include buttons((
///         'round-radius' : 4px,
///         'weight'       : bold
///     ));
@mixin buttons($custom: ()) {

    //*************************************************************
    // Configuration
    //*************************************************************

    $buttons: config((
        'name'              : 'button',
        'color'             : color('greyscale', 'white'),
        'background'        : color('greyscale', 'grey-4'),
        'transition'        : core('transition'),
        'h-padding'         : 1em,
        'v-padding'         : 0.65em,
        'line-height'       : 1,
        'font-weight'       : normal,
        'font-family'       : typography('typefaces', 'primary'),
        'border-width'      : 1px,
        'border-style'      : solid,
        'active-background' : color('brand', 'brand-1'),
        'active-color'      : color('greyscale', 'white'),
        'disabled-opacity'  : 0.6,
        'round-radius'      : 0.4em,
        'group-spacing'     :  0.5em,
        'group-stack'       : 'break-1',
        'palettes'          : ('brand', 'greyscale', 'alert', 'social'),
        'sizes':(
            'sizes': typography-config('sizes')
        )
    ), $custom);

    //*************************************************************
    // Module
    //*************************************************************
        
    @include module {

        //*********************************************************
        // Core Styles
        //*********************************************************
        
        // Private styles 
        display: inline-block;
        vertical-align: middle;
        border-color: transparent;
        cursor: pointer;
        text-decoration: none;

        // Public styles
        color: this('color');
        background: this('background');
        transition: this('transition');
        padding-left: this('h-padding');
        padding-right: this('h-padding');
        padding-top: this('v-padding');
        padding-bottom: this('v-padding');
        line-height: this('line-height');
        font-weight: this('font-weight');
        font-family: this('font-family');
        border-width: this('border-width');
        border-style: this('border-style');

        // Pseudo States
        //*********************************************************

        &:hover {
            text-decoration: none;
            background: darken(this('background'), 10%);
        }
        
        &:focus {
            outline: 0;
        }

        //*********************************************************
        // Sizes
        //*********************************************************

        @include font-sizes(this('sizes'));

        //*********************************************************
        // Colors
        //*********************************************************
                 
        // Point at which light/dark background changes for greyscale buttons
        $threshold: 77%;

        @each $key, $color in merge-palettes(this('palettes')) {
            @include modifier($key) {
                background: $color;
                @if is-grayscale($color, $key) {
                    @if (lightness($color) < $threshold) {
                        color: this('color');
                    } @else {
                        color: typography('colors', 'base');
                    }
                }
                &:hover { 
                    background: darken($color, 10%);
                }
            }
        }

        //*********************************************************
        // Modifiers
        //*********************************************************

        @include modifier('block') {
            width: 100%;
            text-align: center;
            & + & {
                margin-top: (core('margin') / 2);
            }
        } 

        @include modifier('border') {
            background: none;
            color: inherit;
            border-color: currentColor;
            &:hover {
                color: color('greyscale', 'white');
                background: this('background');
                border-color: this('background');
            }
            @each $key, $color in merge-palettes(this('palettes')) {
                @include modifier($key) {
                    color: $color;
                    @if is-grayscale($color, $key) {
                        border-color: $color;
                        color: $color;
                        &:hover {
                            @if (lightness($color) > $threshold) {
                                color: typography('colors', 'base');
                            }
                        }
                    } @else {
                        &:hover {
                            color: color('greyscale', 'white');
                        }
                    }
                    &:hover {
                        background: $color;
                        border-color: $color;
                    }
                }
            }
        }

        @include modifier('disabled') {
            opacity: this('disabled-opacity');
            cursor: not-allowed;
            transition-delay: 999s;
        }

        @include modifier('round') {
            border-radius: this('round-radius');
        }

        @include modifiers(('oval', 'circle')) {
            border-radius: 1.5em;
        }

        @include modifier('sharp') {
            border-radius: 0;
        }
        
        @include modifier('icon') {
            padding: this('v-padding');
            text-align: center;
            .fa {
                width: 1em;
                height: 1em;
            }
        }
        
        @include modifier('active') {
            background: this('active-background');
            color: this('active-color');
            border-color: this('active-background');
            &:hover {
                background: this('active-background');
            }
            @include modifier('border') {
                background: none;
                color: this('active-background');
                &:hover {
                    border-color: this('active-background');
                }
            }
        }

        //*********************************************************
        // Components
        //*********************************************************

        @include component('group') {

            @include module {
                margin-left: this('group-spacing');
                &:first-child {
                    margin-left: 0;
                }
            }
        
            @include modifier('pills') {
                display: table;
                @include module {
                    display: table-cell;
                    margin-left: 0;
                }
                @include modifier('round') {
                    @include module {
                        border-radius: 0;
                        &:first-child {
                            border-radius: this('round-radius') 0 0 this('round-radius');
                        }
                        &:last-child {
                            border-radius: 0 this('round-radius') this('round-radius') 0;
                        }
                    }
                }
            }

        }

        a[class*="#{this('name')}"] {
            color: inherit;
            &:hover {
                color: inherit;
            }
        }

        //*********************************************************
        // Custom Content
        //*********************************************************

        @content;

    } // @include module

    //*************************************************************
    // Hacks
    //*************************************************************

    // Makes input & button elements equal height in Firefox
    input::-moz-focus-inner,
    button::-moz-focus-inner { 
        border: 0;
        padding: 0;
        margin-top: 1px; 
        margin-bottom: 1px;
    }

} // @mixin buttons